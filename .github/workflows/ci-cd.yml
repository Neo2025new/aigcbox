name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop, staging ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

# 环境变量
env:
  NODE_VERSION: 18
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

jobs:
  # 代码质量检查
  code-quality:
    name: Code Quality & Security
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: ESLint Check
        run: npm run lint

      - name: Type Check
        run: npx tsc --noEmit

      - name: Security Audit
        run: npm audit --audit-level high

      - name: Check for vulnerabilities
        run: |
          if npm audit --audit-level high --parseable | grep -q "ELSPROBLEMS"; then
            echo "::error::High severity vulnerabilities found"
            exit 1
          fi

  # 构建测试
  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: code-quality
    strategy:
      matrix:
        environment: [staging, production]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Set environment variables
        run: |
          if [ "${{ matrix.environment }}" == "production" ]; then
            echo "NODE_ENV=production" >> $GITHUB_ENV
            echo "NEXT_PUBLIC_APP_URL=https://your-production-domain.com" >> $GITHUB_ENV
          else
            echo "NODE_ENV=staging" >> $GITHUB_ENV
            echo "NEXT_PUBLIC_APP_URL=https://your-staging-domain.com" >> $GITHUB_ENV
          fi

      - name: Build application
        run: npm run build
        env:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}

      - name: Check build size
        run: |
          echo "::group::Build Analysis"
          npx next-bundle-analyzer
          echo "::endgroup::"

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-${{ matrix.environment }}
          path: .next
          retention-days: 30

  # 单元测试
  test:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: code-quality
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run unit tests
        run: npm test -- --coverage --watchAll=false
        env:
          CI: true

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          fail_ci_if_error: false

  # E2E 测试
  e2e-tests:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name != 'pull_request' || github.base_ref == 'main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright
        run: npx playwright install --with-deps

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-staging
          path: .next

      - name: Start application
        run: |
          npm run start &
          sleep 10
        env:
          PORT: 3000
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY_TEST }}

      - name: Run E2E tests
        run: npx playwright test

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 7

  # 性能测试
  performance:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-staging
          path: .next

      - name: Run Lighthouse CI
        run: |
          npm install -g @lhci/cli@0.12.x
          lhci autorun
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}

  # 部署到 Staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build, test]
    if: github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/staging'
    environment: staging
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install Vercel CLI
        run: npm install --global vercel@latest

      - name: Pull Vercel Environment Information
        run: vercel pull --yes --environment=preview --token=${{ secrets.VERCEL_TOKEN }}

      - name: Build Project Artifacts
        run: vercel build --token=${{ secrets.VERCEL_TOKEN }}

      - name: Deploy to Vercel Staging
        id: deploy
        run: |
          url=$(vercel deploy --prebuilt --token=${{ secrets.VERCEL_TOKEN }})
          echo "url=$url" >> $GITHUB_OUTPUT
          echo "Staging URL: $url"

      - name: Update deployment status
        run: |
          echo "::notice title=Staging Deployment::Successfully deployed to ${{ steps.deploy.outputs.url }}"

      - name: Run smoke tests
        run: |
          sleep 30
          curl -f ${{ steps.deploy.outputs.url }}/api/health || exit 1

  # 部署到 Production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build, test, e2e-tests, performance, deploy-staging]
    if: github.ref == 'refs/heads/main'
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install Vercel CLI
        run: npm install --global vercel@latest

      - name: Pull Vercel Environment Information
        run: vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}

      - name: Build Project Artifacts
        run: vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}

      - name: Deploy to Vercel Production
        id: deploy
        run: |
          url=$(vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }})
          echo "url=$url" >> $GITHUB_OUTPUT
          echo "Production URL: $url"

      - name: Update deployment status
        run: |
          echo "::notice title=Production Deployment::Successfully deployed to ${{ steps.deploy.outputs.url }}"

      - name: Run production smoke tests
        run: |
          sleep 30
          curl -f ${{ steps.deploy.outputs.url }}/api/health || exit 1

      - name: Create release tag
        run: |
          git config user.name github-actions
          git config user.email github-actions@github.com
          git tag -a "v$(date +'%Y%m%d-%H%M%S')" -m "Production release $(date)"
          git push origin --tags

  # 通知
  notify:
    name: Notify Deployment
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()
    steps:
      - name: Notify on success
        if: needs.deploy-production.result == 'success'
        run: |
          echo "🚀 Production deployment successful!"
          # 这里可以添加 Slack/Discord/Email 通知

      - name: Notify on failure
        if: needs.deploy-production.result == 'failure' || needs.deploy-staging.result == 'failure'
        run: |
          echo "❌ Deployment failed!"
          # 这里可以添加失败通知

# 并发控制
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true